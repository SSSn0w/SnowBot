'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Uses an internal Blizzard API to retrieve basic details about a player,
// through their Blizzard account ID. The API returns basic details about
// the players' career - display names, levels, and portraits, for each
// platform/region the player participated in.
let findPlayer = (() => {
  var _ref = _asyncToGenerator(function* (req, options, name) {
    const searchPath = (0, _urlJoin2.default)('/search/account-by-name', name);
    log('findPlayer/http get', searchPath);

    const response = yield req.get(searchPath, { json: true });

    log('findPlayer/http complete', response);

    const accounts = response.map(function (account) {
      const accountIdentity = account.careerLink.match(options.accountIdentityRegex);

      if (!accountIdentity) {
        throw new Error('Could not parse careerLink in response');
      }

      return {
        level: account.level,
        portrait: account.portrait,
        displayName: account.platformDisplayName,
        platform: accountIdentity[1],
        region: accountIdentity[2]
      };
    });

    return {
      name: name,
      accounts
    };
  });

  return function findPlayer(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
})();

// Scrapes the playoverwatch website for details on a players' career, for
// a given region and platform.


let findPlayerStats = (() => {
  var _ref2 = _asyncToGenerator(function* (req, options, platform, region, name) {
    const scrapePath = (0, _urlJoin2.default)('/career', platform, region, name);
    log('findPlayerStats/http get', scrapePath);

    const html = yield req.get(scrapePath);

    log('findPlayerStats/http complete');

    const stats = (0, _scraper.scrapePlayerStats)(options, html);
    return { name, region, platform, stats };
  });

  return function findPlayerStats(_x4, _x5, _x6, _x7, _x8) {
    return _ref2.apply(this, arguments);
  };
})();

// Accepts an options object (taking precedence over defaultOptions)
// and returns a new oversmash object


exports.default = main;

var _urlJoin = require('url-join');

var _urlJoin2 = _interopRequireDefault(_urlJoin);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _scraper = require('./scraper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const log = (0, _debug2.default)('oversmash');

const defaultOptions = {
  normalizeNames: true,
  normalizeValues: true,
  percentsToInts: true,
  defaultRegion: 'us',
  defaultPlatform: 'pc',
  accountIdentityRegex: /^\/career\/([\w]+)\/([\w]+)\/.+$/,
  requestOptions: {
    baseUrl: 'https://playoverwatch.com/en-us',
    headers: {
      'User-Agent': 'https://github.com/filp/oversmash (hi jeff)'
    }
  }
};function main(callerOptions = {}) {
  const sharedOptions = _extends({}, defaultOptions, callerOptions);

  // This will blow-up if the caller overrides callerOptions in weird ways
  const defaultRegion = sharedOptions.defaultRegion;
  const defaultPlatform = sharedOptions.defaultPlatform;

  // Prepare an instance of `request` configured with requestOptions
  // as provided by the caller (or from defaultOptions)
  const req = _requestPromise2.default.defaults(sharedOptions.requestOptions);

  log('default region', defaultRegion);
  log('default platform', defaultPlatform);

  return {
    player(name) {
      return _asyncToGenerator(function* () {
        return findPlayer(req, sharedOptions, name);
      })();
    },

    playerStats(name, region = defaultRegion, platform = defaultPlatform) {
      return _asyncToGenerator(function* () {
        return findPlayerStats(req, sharedOptions, platform, region, name);
      })();
    }
  };
}